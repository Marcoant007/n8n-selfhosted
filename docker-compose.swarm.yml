services:
  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    environment:
      REDIS_USER: default
      REDIS_PASSWORD: default
    networks:
      - network_public
    labels:
      - traefik.enable=false
    command: redis-server --requirepass default
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  postgres:
    image: postgres:14
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: default
      POSTGRES_DB: default
      TZ: America/Sao_Paulo
    networks:
      - network_public
    labels:
      - traefik.enable=false
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  chatwoot:
    image: chatwoot/chatwoot:latest
    depends_on:
      - postgres
      - redis
    ports:
      - '3000:3000'
    volumes:
      - chatwoot_data:/app/storage
    env_file:
      - .env
    networks:
      - network_public
    labels:
      - traefik.enable=true
      - traefik.docker.network=network_public
      - traefik.http.routers.chatwoot.rule=Host(`chatwoot.localhost`)
      - traefik.http.routers.chatwoot.entrypoints=websecure
      - traefik.http.routers.chatwoot.priority=1
      - traefik.http.routers.chatwoot.tls.certresolver=letsencryptresolver
      - traefik.http.services.chatwoot.loadbalancer.server.port=3000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  chatwoot-sidekiq:
    image: chatwoot/chatwoot:latest
    depends_on:
      - postgres
      - redis
    volumes:
      - chatwoot_data:/app/storage
    env_file:
      - .env
    networks:
      - network_public
    labels:
      - traefik.enable=false
    command: bundle exec sidekiq -C config/sidekiq.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  evolution-api:
    image: atendai/evolution-api:v1.7.1
    depends_on:
      - redis
    ports:
      - '8080:8080'
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    environment:
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - CORS_ORIGIN=*
      - DEL_INSTANCE=false
      - DATABASE_ENABLED=false
      - REDIS_ENABLED=true
      - REDIS_URI=redis://:default@redis:6379
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=evolution-api-key-123
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
    networks:
      - network_public
    labels:
      - traefik.enable=true
      - traefik.docker.network=network_public
      - traefik.http.routers.evolution.rule=Host(`evolution.localhost`)
      - traefik.http.routers.evolution.entrypoints=websecure
      - traefik.http.routers.evolution.priority=1
      - traefik.http.routers.evolution.tls.certresolver=letsencryptresolver
      - traefik.http.services.evolution.loadbalancer.server.port=8080
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  n8n:
    image: n8nio/n8n:latest
    depends_on:
      - redis
      - postgres
    ports:
      - '5678:5678'
    volumes:
      - n8n_data:/home/node/.n8n
    environment:
      - WEBHOOK_URL=http://localhost:5678
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - N8N_LOG_LEVEL=debug
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=default
      - DB_POSTGRESDB_USER=default
      - DB_POSTGRESDB_PASSWORD=default
      - N8N_METRICS=true
    networks:
      - network_public
    labels:
      - traefik.enable=true
      - traefik.docker.network=network_public
      - traefik.http.routers.n8n.rule=Host(`n8n.localhost`)
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.priority=1
      - traefik.http.routers.n8n.tls.certresolver=letsencryptresolver
      - traefik.http.services.n8n.loadbalancer.server.port=5678
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

volumes:
  redis_data:
    external: true
    name: redis_data
  postgres_data:
    external: true
    name: postgres_data
  chatwoot_data:
    external: true
    name: chatwoot_data
  evolution_instances:
    external: true
    name: evolution_instances
  evolution_store:
    external: true
    name: evolution_store
  n8n_data:
    external: true
    name: n8n_data

networks:
  network_public:
    external: true
    attachable: true
    name: network_public
